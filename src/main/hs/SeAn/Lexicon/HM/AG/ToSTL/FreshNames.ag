
-- * Fresh-Name Generators

{
-- |Represents a stream of fresh type variables. As it is
--  a stream, it should not be allowed to run out.
type FreshNames = TyVars
}

{
-- |Simple implementation of a typename generator which first
--  enumerates the alphabet, and then continues with numbered types.
tyGen :: FreshNames
tyGen = az ++ ts
  where
  az = map return ['a'..'z'] \\ tyPrim
  ts = map (printf "t%d") ([1..] :: [Int])
}

attr TmS TyS TyEnv
  chn fresh :: FreshNames

sem Ident
  | Ident ty .fresh = tyGen
          env.fresh = tyGen

sem Ty
  | TyApp ty1.fresh = @lhs.fresh
          ty2.fresh = @ty1.fresh
          lhs.fresh = @ty2.fresh
           
sem Decls
  | Cons hd.fresh = @lhs.fresh
         tl.fresh = @lhs.fresh

{
class    HasFsh ty    where fresh :: ty -> FreshNames
instance HasFsh Ty    where fresh = fresh_Syn_Ty . syn
instance HasFsh TyEnv where fresh = fresh_Syn_TyEnv . syn
}
