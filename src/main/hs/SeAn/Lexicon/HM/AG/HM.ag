
-- * Type Declaractions

-- |Type declarations are put into the environment, and passed
--  back in through the inherited attributes.
attr Tm
  inh decl :: MbTy

sem Decl
  | TmDecl tm .decl = Map.lookup @name @lhs.env
  
sem Tm
  | Lam    tm .decl = do TyApp _ ty <- @lhs.decl ; return ty
  | App    tm1.decl = Nothing
           tm2.decl = Nothing

-- * Type Instantiation

attr TyS TyEnv
  syn ins :: self

sem Ty
   | TyAll loc.var   = head @ty.fresh
           lhs.fresh = tail @ty.fresh
           loc.ins   = rename @ident @var @ty.ins

{
class    HasIns ty    where ins :: ty -> ty
instance HasIns Ty    where ins = ins_Syn_Ty . syn
instance HasIns TyEnv where ins = ins_Syn_TyEnv . syn
}


-- * Type Generalization

attr TyS TyEnv
  syn gen :: self

sem Ty
   | * loc.gen = foldr TyAll @it (@ftv \\ @lhs.ftv)

{
class    HasGen ty    where gen :: ty -> ty
instance HasGen Ty    where gen = gen_Syn_Ty . syn
instance HasGen TyEnv where gen = gen_Syn_TyEnv . syn
}
