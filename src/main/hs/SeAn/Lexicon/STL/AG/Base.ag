
-- |@Lx@: a lexicon contains a list of statements.
data Lx
   | Lx decls :: Decls

-- |@Ss@: a list of statements.
type Decls = [Decl]

-- |@Ss@: a statement is either a type statement
--  or a term definition.
data Decl
   | Decl an :: An ident :: Var tm :: Tm
  
-- |@An@: an annotation is either public (+),
--  private (-) or "automatic" (@).
data An
   | Publ
   | Priv

{
type TyVar = String
}

-- |@Ty@: a type is a series of single-character
--  variables with optional arrows.
data Ty
   | Var ident :: TyVar
   | App ty1,ty2 :: Ty
   | All ident :: TyVar ty :: Ty
  
{
type Var = String
}

-- |@Tm@: a term is either a variable, an application
--  or a lambda abstraction.
data Tm
   | Var ident :: Ident
   | App tm1,tm2 :: Tm
   | Lam ident :: Ident tm :: Tm
   
data Ident
   | Ident name :: Var ty :: Ty

deriving * : Eq
