
imports
{
import Data.Maybe (fromJust)
import UU.Pretty (PP,PP_Doc,(>-<),(>|<),(>#<),text,pp,pp_parens)
import qualified UU.Pretty as PP (empty)
}

attr AnS TyS TmS Ident
  syn pp use {>-<} {PP.empty} :: PP_Doc
  
sem Decl
  | Decl loc.pp = @an.pp >-< text @name >#< text "=" >#< @tm.pp
  
sem An
  | Publ  loc.pp = text "public"
  | Priv  loc.pp = text "private"
  
attr Ty Tm
  syn pp_parens :: PP_Doc
  
sem Ty
  | Var loc.pp        = text @ident
        loc.pp_parens = @pp
  | App loc.pp        = @ty1.pp_parens >|< @ty2.pp
        loc.pp_parens = pp_parens @pp
  | All loc.pp        = text "!" >|< text @ident >|< text "." >|< @ty.pp
        loc.pp_parens = pp_parens @pp
        
sem Tm
  | Var loc.pp        = text @ident.name >|< text ":" >|< @hm.pp
        loc.pp_parens = @pp
  | App loc.pp        = @tm1.pp_parens >#< @tm2.pp_parens
        loc.pp_parens = pp_parens @pp
  | Lam loc.pp        = text "\\" >|< text @ident.name >|< text ":" >|< @hm.pp >|< text "." >|< @tm.pp
        loc.pp_parens = pp_parens @pp
        
sem Ident
  | Ident loc.pp      = text @name >|< text ":" >|< @ty.pp

-- show
{
instance PP Lx where pp lx = pp_Syn_Lx $ wrap_Lx (sem_Lx lx) ((inh lx) {env_Inh_Lx=tyEnv lx})
instance PP St where pp st = pp_Syn_St $ wrap_St (sem_St st) ((inh st) {env_Inh_St=tyEnv st})
instance PP An where pp an = pp_Syn_An $ wrap_An (sem_An an) (Inh_An)
instance PP Tm where pp tm = pp_Syn_Tm $ wrap_Tm (sem_Tm tm) ((inh tm) {env_Inh_Tm=tyEnv tm})
instance PP Ty where pp ty = pp_Syn_Ty $ wrap_Ty (sem_Ty ty) (inh ty)
instance Show Lx where show = show . pp
instance Show St where show = show . pp
instance Show An where show = show . pp
instance Show Tm where show = show . pp
instance Show Ty where show = show . pp
}
